@page "/Usuarios"

@using System.Net.Http.Json
@using Microsoft.AspNetCore.Identity
@inject HttpClient httpClient
@inject IUsuarioService _usuarioServices
@inject NavigationManager _navManager
@inject IDialogService _dialogService

<MudTable Items="@Elements"
          Dense="@dense"
          Hover="@hover"
          Bordered="@bordered"
          Striped="@striped"
          Filter="new Func<Usuario,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Usuarios</MudText>
        <MudToolBarSpacer />
        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.LibraryAdd" Size="Size.Small" IconSize="Size.Small" OnClick="@(() => Editar(null))" />
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nome</MudTh>
        <MudTh>Sobrenome</MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Nome</MudTd>
        <MudTd DataLabel="Sign">@context.SobreNome</MudTd>
        <MudTd>
            <MudFab Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" OnClick="@(() => Editar(context.Id))" />
            <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.DeleteSweep" Size="Size.Small" IconSize="Size.Small" OnClick="@(() => Excluir(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudToolBar>
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudToolBarSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true">Selected: @selectedItem?.Nome</MudText>
    </div>
</MudToolBar>


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";
    private Usuario selectedItem = null;
    private HashSet<Usuario> selectedItems = new HashSet<Usuario>();
    private IEnumerable<Usuario> Elements = new List<Usuario>();

    protected override async Task OnInitializedAsync()
    {
        var result = await _usuarioServices.GetUsuarios(null);
        if (result.Success)
            Elements = result.Mensagens.FirstOrDefault().DeserializeJsonToObject<List<Usuario>>();
    }

    private bool FilterFunc(Usuario usuario)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (usuario.Nome.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (usuario.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{usuario.UserName} {usuario.Nome} {usuario.SobreNome} {usuario.Email}".Contains(searchString))
            return true;
        return false;
    }

    private void Editar(string usuarioId)
    {
        string url = "/UsuariosCreateOrUpdate";
        if (!string.IsNullOrEmpty(usuarioId))
            url += $"/{usuarioId}";

        _navManager.NavigateTo(url);
    }
    private async Task Excluir(string usuarioId)
    {
        var usuario = Elements.Where(x => x.Id.Equals(usuarioId)).FirstOrDefault();
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Confirma exclusão do Usuario: {usuario.Nome}? Este processo é irreverssível.");
        parameters.Add("ButtonText", "Excluir");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };

        var dialoag = _dialogService.Show<DialogDelete>("Delete", parameters, options);
        if (!(await dialoag.Result).Cancelled)
        {
            var defaultResponse = await _usuarioServices.DeleteUsuario(usuarioId);

            if (defaultResponse.Success)
            {
                var cp = Elements.ToList();
                cp.Remove(usuario);
                Elements = cp;
                ShouldRender();


                parameters = new DialogParameters();
                parameters.Add("ContentText", $"Usuario: {usuario.Nome}. Foi excluída com sucesso");
                parameters.Add("ButtonText", "Ok");
                parameters.Add("Color", Color.Success);
                parameters.Add("ShowCancelButton", false);
                options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };
                dialoag = _dialogService.Show<DialogDelete>("Opa", parameters, options);
            }
            else
            {
                parameters = new DialogParameters();
                parameters.Add("ContentText", $"Oops.. Usuario: {usuario.Nome}. Não foi excluida.");
                parameters.Add("ButtonText", "Ok");
                parameters.Add("Color", Color.Info);
                parameters.Add("ShowCancelButton", false);
                options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };
                dialoag = _dialogService.Show<DialogDelete>("Opss", parameters, options);
            }
        }
    }

}